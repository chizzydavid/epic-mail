{"version":3,"sources":["../../server/controllers/Group.js"],"names":["Group","createGroup","req","res","values","name","description","user","user_id","members","body","rows","db","query","group","insert","groupId","group_id","length","memberString","forEach","idx","status","json","data","e","error","getAllUserGroups","rowCount","selectByOwner","message","editGroup","params","updateGroup","addUserToGroup","deleteGroupUsers","member","deleteUserFromGroup","selectUser","id","deleteUser","sendMessageToGroup","inboxString","result","selectGroupMembers","format","subject","parentMessageId","message_id","sender_id","getSingleGroup","selectByGroupId","deleteGroup"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport db from '../db';\nimport { message, group } from '../db/queries';\n\nconst Group = {\n  async createGroup(req, res) {\n    const values = [req.values.name, req.values.description || '', req.user.user_id];\n    const { members } = req.body;\n    try {\n      const { rows } = await db.query(group.insert, values);\n      const groupId = rows[0].group_id;\n\n      if (members.length !== 0) {\n        let memberString = '';\n        members.forEach((user, idx) => {\n          memberString += `('${groupId}', '${user}', 'member')${idx === members.length - 1 ? '' : ','}`;\n        });\n        await db.query(`INSERT INTO group_users(group_id, user_id, user_role) VALUES ${memberString} returning *`);\n      }\n      return res.status(201).json({\n        status: 201,\n        data: rows[0],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error creating your group. ${e}`,\n      });\n    }\n  },\n\n  async getAllUserGroups(req, res) {\n    try {\n      const { rows, rowCount } = await db.query(group.selectByOwner, [req.user.user_id]);\n      if (rowCount === 0) {\n        return res.status(200).json({\n          status: 200,\n          message: 'You have no groups.',\n        });\n      }\n      return res.status(200).json({\n        status: 200,\n        data: [...rows],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error getting all your groups. ${e}`,\n      });\n    }\n  },\n\n  async editGroup(req, res) {\n    try {\n      const values = [\n        req.values.name,\n        req.values.description || '',\n        req.params.groupId,\n      ];\n      const { rows } = await db.query(group.updateGroup, values);\n      return res.status(200).json({\n        status: 200,\n        data: rows[0],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error editing this group. ${e}`,\n      });\n    }\n  },\n\n  async addUserToGroup(req, res) {\n    try {\n      await db.query(group.deleteGroupUsers, [req.params.groupId]);\n\n      let memberString = '';\n      const { members } = req.body;\n      members.forEach((member, idx) => {\n        memberString += `('${req.params.groupId}', '${member}', 'member')${idx === members.length - 1 ? '' : ','}`;\n      });\n\n      const { rows } = await db.query(`INSERT INTO group_users(group_id, user_id, user_role) VALUES ${memberString} returning *`);\n      return res.status(201).json({\n        status: 201,\n        data: [...rows],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error adding new users to your group. ${e}`,\n      });\n    }\n  },\n\n  async deleteUserFromGroup(req, res) {\n    try {\n      const { rowCount } = await db.query(group.selectUser, [req.params.groupId, req.params.id]);\n      if (rowCount === 0) {\n        return res.status(404).json({\n          status: 404,\n          error: 'User is not a member of this group.',\n        });\n      }\n      const { rows } = await db.query(group.deleteUser, [req.params.groupId, req.params.id]);\n      if (!rows[0]) {\n        return res.status(200).json({\n          status: 200,\n          message: 'User deleted successfully.',\n        });\n      }\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error deleting this user from your group. ${e}`,\n      });\n    }\n  },\n\n  async sendMessageToGroup(req, res) {\n    let inboxString = '';\n    let members;\n    try {\n      const result = await db.query(group.selectGroupMembers, [req.params.groupId]);\n      members = result.rows;\n\n      if (!members.length) {\n        return res.status(200).json({\n          status: 200,\n          message: 'There are no group members for this group.',\n        });\n      }\n\n      const values = [\n        moment().format('MMMM Do YYYY, h:mm:ss a'),\n        req.values.subject,\n        req.values.message,\n        req.user.user_id,\n        0,\n        req.values.parentMessageId || 0,\n        'sent',\n      ];\n\n      const { rows } = await db.query(message.insert, values);\n      const { message_id, sender_id } = rows[0];\n\n      members.forEach((user, idx) => {\n        inboxString += `(${user.user_id}, ${message_id})${idx === members.length - 1 ? '' : ','}`;\n      });\n\n      await db.query(`INSERT INTO inbox (receiver_id, message_id) VALUES ${inboxString}`);\n      await db.query(`INSERT INTO outbox (sender_id, message_id) VALUES (${sender_id}, ${message_id})`);\n\n      return res.status(201).json({\n        status: 201,\n        data: rows[0],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error sending your message. ${e}`,\n      });\n    }\n  },\n\n  async getSingleGroup(req, res) {\n    try {\n      // get group details\n      const { rows } = await db.query(group.selectByGroupId, [req.params.groupId]);\n      // get group members\n      const result = await db.query(group.selectGroupMembers, [req.params.groupId]);\n\n      return res.status(200).json({\n        status: 200,\n        data: [rows[0], result.rows],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error retrieving this group. ${e}`,\n      });\n    }\n  },\n\n  async deleteGroup(req, res) {\n    try {\n      await db.query(group.deleteGroup, [req.params.groupId]);\n      await db.query(group.deleteGroupUsers, [req.params.groupId]);\n      return res.status(200).json({\n        status: 200,\n        message: 'Group deleted successfully.',\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error deleting your group. ${e}`,\n      });\n    }\n  },\n\n};\nexport default Group;\n"],"file":"Group.js"}