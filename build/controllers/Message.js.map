{"version":3,"sources":["../../server/controllers/Message.js"],"names":["Message","sendMessage","req","res","receiver_id","result","db","query","message","selectUser","values","recipient","rows","status","json","error","user_id","format","subject","user","parentMessageId","insert","message_id","sender_id","data","e","saveAsDraft","getAllReceived","updateStatusUnread","selectAllCategory","rowCount","selectAllReceived","newMsgCount","getCategory","category","next","selectAllDrafts","getAllSent","selectAllSent","getSingleMessage","allMessages","params","id","selectByIdJoinUser","unshift","parent_msg_id","Number","updateToRead","updateStatusRead","retractMessage","selectReceiver","deleteAllReceived","deleteReceived","updateStatusDraft","deleteReceivedMessage","deleteSentMessage","deleteSent"],"mappings":"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","sourcesContent":["/* eslint-disable func-names */\nimport moment from 'moment';\nimport db from '../db';\nimport { message } from '../db/queries';\n\nconst Message = {\n\n  async sendMessage(req, res) {\n    let receiver_id;\n    try {\n      const result = await db.query(message.selectUser, [req.values.recipient]);\n      if (!result.rows[0]) {\n        return res.status(401).json({\n          status: 401,\n          error: 'Message recipient is not a registered user.',\n        });\n      }\n\n      receiver_id = result.rows[0].user_id;\n      const values = [\n        moment().format('MMMM Do YYYY, h:mm:ss a'),\n        req.values.subject,\n        req.values.message,\n        req.user.user_id,\n        receiver_id,\n        req.values.parentMessageId || 0,\n        'sent',\n      ];\n      const { rows } = await db.query(message.insert, values);\n      const { message_id, sender_id } = rows[0];\n      await db.query(`INSERT INTO inbox (receiver_id, message_id) VALUES (${receiver_id}, ${message_id}) returning *`);\n      await db.query(`INSERT INTO outbox (sender_id, message_id) VALUES (${sender_id}, ${message_id}) returning *`);\n      return res.status(201).json({\n        status: 201,\n        data: rows[0],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error sending your message. ${e}`,\n      });\n    }\n  },\n\n  async saveAsDraft(req, res) {\n    let receiver_id;\n    try {\n      if (req.values.recipient !== '') {\n        const result = await db.query(message.selectUser, [req.values.recipient]);\n        if (!result.rows[0]) {\n          return res.status(401).json({\n            status: 401,\n            error: 'Message recipient is not a registered user.',\n          });\n        }\n        receiver_id = result.rows[0].user_id;\n      }\n\n      const values = [\n        moment().format('MMMM Do YYYY, h:mm:ss a'),\n        req.values.subject,\n        req.values.message,\n        req.user.user_id,\n        receiver_id || 0,\n        req.values.parentMessageId || 0,\n        'draft',\n      ];\n\n      const { rows } = await db.query(message.insert, values);\n      const { message_id, sender_id } = rows[0];\n      await db.query(`INSERT INTO outbox (sender_id, message_id) VALUES (${sender_id}, ${message_id}) returning *`);\n\n      return res.status(201).json({\n        status: 201,\n        data: rows[0],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error saving your draft. ${e}`,\n      });\n    }\n  },\n\n  async getAllReceived(req, res) {\n    try {\n      await db.query(message.updateStatusUnread, [req.user.user_id]);\n      const result = await db.query(message.selectAllCategory, [req.user.user_id, 'unread']);\n      const { rows, rowCount } = await db.query(message.selectAllReceived, [req.user.user_id]);\n      if (rowCount === 0) {\n        return res.status(200).json({\n          status: 200,\n          message: 'You have no received messages.',\n        });\n      }\n      return res.status(200).json({\n        status: 200,\n        data: [...rows],\n        newMsgCount: result.rowCount\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error getting all your received messages. ${e}`,\n      });\n    }\n  },\n\n  getCategory(category) {\n    return async function (req, res, next) {\n      const query = category === 'draft' ? message.selectAllDrafts : message.selectAllCategory;\n      try {\n        const { rows, rowCount } = await db.query(query, [req.user.user_id, category]);\n        if (rowCount === 0) {\n          return res.status(200).json({\n            status: 200,\n            message: `You have no ${category} messages.`,\n          });\n        }\n\n        return res.status(200).json({\n          status: 200,\n          data: [...rows],\n        });\n      } catch (e) {\n        return res.status(400).json({\n          status: 400,\n          error: `There was an error getting your ${category} messages. ${e}`,\n        });\n      }\n    };\n  },\n\n  async getAllSent(req, res) {\n    try {\n      const { rows, rowCount } = await db.query(message.selectAllSent, [req.user.user_id]);\n      if (rowCount === 0) {\n        return res.status(200).json({\n          status: 200,\n          message: 'You haven\\'t sent any messages.',\n        });\n      }\n\n      return res.status(200).json({\n        status: 200,\n        data: [...rows],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error getting your sent messages. ${e}`,\n      });\n    }\n  },\n\n  async getSingleMessage(req, res) {\n    try {\n      let result; const allMessages = [];\n      let parentMessageId = req.params.id;\n\n      do {\n        result = await db.query(message.selectByIdJoinUser, [parentMessageId]);\n        allMessages.unshift(result.rows[0]);\n        parentMessageId = result.rows[0].parent_msg_id;\n      } while (Number(parentMessageId));\n\n      return res.status(200).json({\n        status: 200,\n        data: allMessages,\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error retrieving this Message. ${e}`,\n      });\n    }\n  },\n\n  async updateToRead(req, res) {\n    try {\n      await db.query(message.updateStatusRead, [req.user.user_id, req.params.id]);\n      return res.status(200).json({\n        status: 200,\n        message: 'Message status successfully updated.',\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error changing the status of this message. ${e}`,\n      });\n    }\n  },\n\n  async retractMessage(req, res) {\n    try {\n      let result;\n      const { rows } = await db.query(message.selectReceiver, [req.params.id]);\n\n      if (!Number(rows[0].receiver_id)) {\n        result = await db.query(message.deleteAllReceived, [req.params.id]);\n      } else {\n        result = await db.query(message.deleteReceived, [rows[0].receiver_id, req.params.id]);\n      }\n\n      await db.query(message.updateStatusDraft, [req.params.id]);\n      if (!result.rows[0]) {\n        return res.status(200).json({\n          status: 200,\n          message: 'Message successfully retracted.',\n        });\n      }\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error retracting this Message. ${e}`,\n      });\n    }\n  },\n\n  async deleteReceivedMessage(req, res) {\n    try {\n      const result = await db.query(message.deleteReceived, [req.user.user_id, req.params.id]);\n      if (!result.rows[0]) {\n        return res.status(200).json({\n          status: 200,\n          message: 'Message successfully deleted.',\n        });\n      }\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error deleting this Message. ${e}`,\n      });\n    }\n  },\n\n  async deleteSentMessage(req, res) {\n    try {\n      const result = await db.query(message.deleteSent, [req.user.user_id, req.params.id]);\n      if (!result.rows[0]) {\n        return res.status(200).json({\n          status: 200,\n          message: 'Message successfully deleted.',\n        });\n      }\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error deleting this Message. ${e}`,\n      });\n    }\n  },\n};\nexport default Message;\n"],"file":"Message.js"}