{"version":3,"sources":["../../server/controllers/User.js"],"names":["User","createUser","req","res","hashPassword","Helper","values","password","imgName","file","filename","email","firstName","lastName","is_admin","rows","db","query","user","insert","user_id","first_name","last_name","photo","userData","token","generateToken","status","json","message","data","e","error","loginUser","selectByEmail","comparePassword","getAllUsers","selectAll","getSingleUser","selectById","params","id","deleteUser","rowCount","delete"],"mappings":"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","sourcesContent":["import Helper from './Helper';\nimport db from '../db';\nimport { user } from '../db/queries';\n\nconst User = {\n  async createUser(req, res) {\n    try {\n      const hashPassword = Helper.hashPassword(req.values.password);\n      const imgName = req.file ? req.file.filename : 'default-user.png';\n      const values = [\n        req.values.email,\n        req.values.firstName,\n        req.values.lastName,\n        hashPassword,\n        req.values.is_admin || 0,\n        imgName,\n      ];\n\n      const { rows } = await db.query(user.insert, values);\n      if (rows[0].user_id) {\n        const {\n          user_id, email, first_name, last_name, photo,\n        } = rows[0];\n\n        const userData = {\n          user_id, email, first_name, last_name, photo,\n        };\n\n        const token = Helper.generateToken({ ...userData });\n        return res.status(201).json({\n          status: 201,\n          message: 'User successfully registered',\n          data: { token, user: userData },\n        });\n      }\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `An error occured while creating your account. ${e}`,\n      });\n    }\n  },\n\n  async loginUser(req, res) {\n    try {\n      const { rows } = await db.query(user.selectByEmail, [req.values.email]);\n      if (!rows[0]) {\n        return res.status(400).json({\n          status: 400,\n          error: 'Invalid Login Credentials.',\n        });\n      }\n      if (!Helper.comparePassword(req.values.password, rows[0].password)) {\n        return res.status(400).json({\n          status: 400,\n          error: 'Invalid Login Credentials.',\n        });\n      }\n      const {\n        user_id, email, first_name, last_name, photo,\n      } = rows[0];\n\n      const userData = {\n        user_id, email, first_name, last_name, photo,\n      };\n\n      const token = Helper.generateToken({ ...userData });\n      return res.status(200).json({\n        status: 200,\n        data: { token, user: userData },\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `An error occured while trying to log you in. ${e}`,\n      });\n    }\n  },\n\n  async getAllUsers(req, res) {\n    try {\n      const { rows } = await db.query(user.selectAll);\n      return res.status(200).json({\n        status: 200,\n        data: [...rows],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error getting all users. ${e}`,\n      });\n    }\n  },\n\n  async getSingleUser(req, res) {\n    try {\n      const { rows } = await db.query(user.selectById, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 404,\n          error: 'User not found.',\n        });\n      }\n      return res.status(200).json({\n        status: 200,\n        data: rows[0],\n      });\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error retrieving this User. ${e}`,\n      });\n    }\n  },\n\n  async deleteUser(req, res) {\n    try {\n      const { rowCount } = await db.query(user.selectById, [req.params.id]);\n      if (!rowCount) {\n        return res.status(404).json({\n          status: 404,\n          error: 'User not found.',\n        });\n      }\n      const { rows } = await db.query(user.delete, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(200).json({\n          status: 200,\n          message: 'User successfully deleted.',\n        });\n      }\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error deleting this User. ${e}`,\n      });\n    }\n  },\n};\n\nexport default User;\n"],"file":"User.js"}