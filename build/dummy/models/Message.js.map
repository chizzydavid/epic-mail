{"version":3,"sources":["../../../server/dummy/models/Message.js"],"names":["Message","messages","data","newMessage","id","subject","message","parentMessageId","senderId","receiverId","createdOn","Date","now","status","push","received","filter","findAllReceived","unread","sent","foundMessage","find","findOne","index","indexOf","splice"],"mappings":";;;;;;;;;;;;;IAAMA,O;;;AACJ,qBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;2BAEMC,I,EAAM;AACX,UAAMC,UAAU,GAAG;AACjBC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADQ;AAEjBC,QAAAA,OAAO,EAAEH,IAAI,CAACG,OAFG;AAGjBC,QAAAA,OAAO,EAAEJ,IAAI,CAACI,OAHG;AAIjBC,QAAAA,eAAe,EAAEL,IAAI,CAACK,eAJL;AAKjBC,QAAAA,QAAQ,EAAEN,IAAI,CAACM,QALE;AAMjBC,QAAAA,UAAU,EAAEP,IAAI,CAACO,UANA;AAOjBC,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAPM;AAQjBC,QAAAA,MAAM,EAAEX,IAAI,CAACW;AARI,OAAnB;AAWA,WAAKZ,QAAL,CAAca,IAAd,CAAmBX,UAAnB;AACA,aAAOA,UAAP;AACD;;;oCAEeC,E,EAAI;AAClB,UAAMW,QAAQ,GAAG,KAAKd,QAAL,CAAce,MAAd,CAAqB,UAAAV,OAAO;AAAA,eAAIA,OAAO,CAACG,UAAR,KAAuBL,EAA3B;AAAA,OAA5B,CAAjB;AACA,aAAOW,QAAP;AACD;;;kCAEaX,E,EAAI;AAChB;AACA,UAAMW,QAAQ,GAAG,KAAKE,eAAL,CAAqBb,EAArB,CAAjB;AACA,UAAMc,MAAM,GAAGH,QAAQ,CAACC,MAAT,CAAgB,UAAAV,OAAO;AAAA,eAAIA,OAAO,CAACO,MAAR,KAAmB,MAAvB;AAAA,OAAvB,CAAf;AACA,aAAOK,MAAP;AACD;;;gCAEWd,E,EAAI;AACd,UAAMe,IAAI,GAAG,KAAKlB,QAAL,CAAce,MAAd,CAAqB,UAAAV,OAAO;AAAA,eAAIA,OAAO,CAACE,QAAR,KAAqBJ,EAAzB;AAAA,OAA5B,CAAb;AACA,aAAOe,IAAP;AACD;;;4BAEOf,E,EAAI;AACV,UAAMgB,YAAY,GAAG,KAAKnB,QAAL,CAAcoB,IAAd,CAAmB,UAAAf,OAAO;AAAA,eAAIA,OAAO,CAACF,EAAR,KAAeA,EAAnB;AAAA,OAA1B,CAArB;AACA,aAAOgB,YAAP;AACD;;;4BAEMhB,E,EAAI;AACT,UAAME,OAAO,GAAG,KAAKgB,OAAL,CAAalB,EAAb,CAAhB;AACA,UAAMmB,KAAK,GAAG,KAAKtB,QAAL,CAAcuB,OAAd,CAAsBlB,OAAtB,CAAd;AACA,WAAKL,QAAL,CAAcwB,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACA,aAAO,EAAP;AACD;;;;;;eAGY,IAAIvB,OAAJ,E","sourcesContent":["class Message {\n  constructor() {\n    this.messages = [];\n  }\n\n  create(data) {\n    const newMessage = {\n      id: data.id,\n      subject: data.subject,\n      message: data.message,\n      parentMessageId: data.parentMessageId,\n      senderId: data.senderId,\n      receiverId: data.receiverId,\n      createdOn: Date.now(),\n      status: data.status,\n    };\n\n    this.messages.push(newMessage);\n    return newMessage;\n  }\n\n  findAllReceived(id) {\n    const received = this.messages.filter(message => message.receiverId === id);\n    return received;\n  }\n\n  findAllUnread(id) {\n    // assuming message status remains 'sent' until the receiver reads it and its marked as 'read';\n    const received = this.findAllReceived(id);\n    const unread = received.filter(message => message.status === 'sent');\n    return unread;\n  }\n\n  findAllSent(id) {\n    const sent = this.messages.filter(message => message.senderId === id);\n    return sent;\n  }\n\n  findOne(id) {\n    const foundMessage = this.messages.find(message => message.id === id);\n    return foundMessage;\n  }\n\n  delete(id) {\n    const message = this.findOne(id);\n    const index = this.messages.indexOf(message);\n    this.messages.splice(index, 1);\n    return {};\n  }\n}\n\nexport default new Message();\n"],"file":"Message.js"}