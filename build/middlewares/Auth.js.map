{"version":3,"sources":["../../server/middlewares/Auth.js"],"names":["dotenv","config","Auth","verifyToken","req","res","next","token","headers","authorization","status","json","error","decoded","jwt","verify","process","env","SECRETKEY","user","e","verifyMessage","rows","db","query","message","verifyQuery","params","id","length","authorized","some","messg","receiver_id","user_id","sender_id","verifyGroup","group","selectByGroupId","groupId","owner_id"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport db from '../db';\nimport { message, group } from '../db/queries';\n\ndotenv.config();\n\nconst Auth = {\n  verifyToken(req, res, next) {\n    const token = req.headers.authorization;\n    if (!token) {\n      return res.status(401).json({\n        status: 401,\n        error: 'No Authentication Token Provided.',\n      });\n    }\n\n    try {\n      const decoded = jwt.verify(token, process.env.SECRETKEY);\n      req.user = decoded.user;\n      next();\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error processing your request. ${e}`,\n      });\n    }\n  },\n\n  async verifyMessage(req, res, next) {\n    try {\n      const { rows } = await db.query(message.verifyQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 404,\n          error: 'Message not found.',\n        });\n      }\n      // if rows contains more than one object then the message was sent to a group\n      // confirm if user was a member of the group that received the message\n      if (rows.length > 1) {\n        const authorized = \n          rows.some(messg => messg.receiver_id === req.user.user_id || messg.sender_id === req.user.user_id);\n\n          if (!authorized) {\n          return res.status(400).json({\n            status: 400,\n            error: 'Unauthorized access.',\n          });\n        }\n      } else if (req.user.user_id !== rows[0].sender_id && req.user.user_id !== rows[0].receiver_id) {\n        return res.status(400).json({\n          status: 400,\n          error: 'Unauthorized access.',\n        });\n      }\n      next();\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error verifying this Message. ${e}`,\n      });\n    }\n  },\n\n  async verifyGroup(req, res, next) {\n    try {\n      const { rows } = await db.query(group.selectByGroupId, [req.params.groupId]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 404,\n          error: 'Group not found.',\n        });\n      }\n      if (req.user.user_id !== rows[0].owner_id) {\n        return res.status(401).json({\n          status: 401,\n          error: 'Unauthorized access.',\n        });\n      }\n      next();\n    } catch (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `There was an error verifying group. ${e}`,\n      });\n    }\n  },\n};\n\nexport default Auth;\n"],"file":"Auth.js"}