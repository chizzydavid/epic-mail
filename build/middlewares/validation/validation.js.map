{"version":3,"sources":["../../../server/middlewares/validation/validation.js"],"names":["Validate","signUp","req","res","next","values","Object","entries","body","forEach","input","trim","firstName","lastName","email","password","confirmPassword","errors","nameRegx","push","test","length","status","json","error","db","query","then","results","rowCount","catch","e","login","sendMessage","subject","message","recipient","params","groupId","saveDraft","newGroup","name","description"],"mappings":"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","sourcesContent":["import db from '../../db';\n\nconst Validate = {\n  signUp(req, res, next) {\n    req.values = {};\n\n    Object.entries(req.body).forEach((input) => {\n      req.values[input[0]] = input[1].trim();\n    });\n\n    const {\n      firstName, lastName, email, password, confirmPassword,\n    } = req.values;\n\n    const errors = [];\n    const nameRegx = /^[a-zA-Z]{2,}$/;\n\n    if (firstName === '') { errors.push('Please enter a first name.'); } else\n    if (!nameRegx.test(firstName)) errors.push('Please enter a valid first name');\n\n    if (lastName === '') { errors.push('Please enter a last name.'); } else\n    if (!nameRegx.test(lastName)) errors.push('Please enter a valid last name.');\n\n    if (email === '') { errors.push('Please enter an email address.'); } else\n    if (!/^\\S+@\\S+\\.[a-zA-Z0-9]+$/.test(email)) errors.push('Please enter a valid email address.');\n\n    if (password === '') errors.push('Please enter a password');\n\n    else if (confirmPassword === '') errors.push('Please re-enter your password.');\n\n    else if (password.length < 6) { errors.push('Your password must be at least 6 characters in length.'); } else\n    if (password !== confirmPassword) errors.push('Your two passwords don\\'t match.');\n    else if (!/^[\\w]{6,20}$/.test(password)) { errors.push('Your password can only contain alphanumeric characters.'); }\n\n    if (errors.length !== 0) {\n      return res.status(400).json({\n        status: 400,\n        error: errors,\n      });\n    }\n\n    db.query('SELECT * FROM users WHERE email = $1', [req.values.email])\n      .then(results => {\n        if (results.rowCount) {\n          return res.status(400).json({\n            status: 400,\n            error: 'Email already exists.',\n          });\n        }\n        next();\n      })\n      .catch(e => res.status(400).json({\n        status: 400,\n        error: `There was a problem validating your email address. ${e}`,\n      }));\n  },\n\n  login(req, res, next) {\n    req.values = {};\n    Object.entries(req.body).forEach((input) => {\n      req.values[input[0]] = input[1].trim();\n    });\n    const { email, password } = req.values;\n    const errors = [];\n\n    if (email === '') errors.push('Please enter an email address.');\n    else\n    if (!/^\\S+@\\S+\\.[\\w]+$/.test(email)) { errors.push('Please enter a valid email address.'); }\n    if (password === '') errors.push('Please enter a password');\n    if (errors.length !== 0) {\n      return res.status(400).json({\n        status: 400,\n        error: errors,\n      });\n    }\n\n    next();\n  },\n\n  sendMessage(req, res, next) {\n    req.values = {};\n\n    Object.entries(req.body).forEach(input => { \n      req.values[input[0]] = input[1].trim(); \n    });\n    \n    const { subject, message, recipient } = req.values;\n    const errors = [];\n\n    if (subject === '') { errors.push('Message must have a subject.'); }\n\n    if (message === '') { errors.push('Please enter a message to send.'); }\n\n    // check for a receiver if the message is not being sent to a group.\n    if (!req.params.groupId) {\n      if (recipient === '') { errors.push('Please enter the message recipient'); }\n    }\n\n    if (errors.length !== 0) {\n      return res.status(400).json({\n        status: 400,\n        error: errors,\n      });\n    }\n\n    next();\n  },\n\n  saveDraft(req, res, next) {\n    req.values = {};\n    Object.entries(req.body).forEach((input) => { req.values[input[0]] = input[1].trim(); });\n    const { subject, message, recipient } = req.values;\n    const errors = [];\n\n    if (subject === '' && message === '' && recipient === '') {\n      errors.push('Draft must have a subject, message or a receiver\\'s address.');\n    }\n    if (recipient !== '') {\n      if (!/^\\S+@\\S+\\.[\\w]+$/.test(recipient)) { errors.push('Receiver\\'s email address is invalid.'); }\n    }\n    if (errors.length !== 0) {\n      return res.status(400).json({\n        status: 400,\n        error: errors,\n      });\n    }\n\n    next();\n  },\n\n  newGroup(req, res, next) {\n    req.values = {};\n    Object.entries(req.body).forEach((input) => {\n      if (typeof input[1] === 'string') {\n        req.values[input[0]] = input[1].trim();\n      }\n    });\n    const { name, description } = req.values;\n    const errors = [];\n\n    if (name === '') { errors.push('Please enter a group name.'); } else\n    if (!/^[a-zA-Z0-9 ]{4,}$/.test(name)) errors.push('Please enter a valid first name');\n\n    if (description === '') { errors.push('Please enter a group description.'); } else\n    if (!/^[a-zA-Z0-9.\"';: ]{4,}$/.test(description)) errors.push('Please enter a valid description');\n\n    if (errors.length !== 0) {\n      return res.status(400).json({\n        status: 400,\n        error: errors,\n      });\n    }\n\n    next();\n  },\n};\n\nexport default Validate;\n"],"file":"validation.js"}