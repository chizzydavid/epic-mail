{"version":3,"sources":["../../server/tests/Message.spec.js"],"names":["chai","use","chaiHttp","should","url","describe","token","it","message","id","subject","parentMessageId","senderId","receiverId","status","request","app","post","set","send","end","err","res","have","body","property","which","is","an","equal","get","delete"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../server';\n\n// configure chai\nchai.use(chaiHttp);\nchai.should();\n\nconst url = '/api/v1/messages';\ndescribe('Testing Message Endpoints /api/v1/messages', () => {\n  const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImlhdCI6MTU1MTc1NzE4NX0.Lk-grtg76D3mroOGzXE5UuIt240hZLsKfRJWdIxNbc4';\n\n  // testing POST route to create a new messsage\n  // error messages should be specified in the tests\n  describe('POST/ - Send a Message', () => {\n    it('Should return status 201(Created) and a Message object', () => {\n      const message = {\n        id: 4,\n        subject: 'Hello Mail',\n        message: \"It's nice to meet you, Send me a mail sometime.\",\n        parentMessageId: 0,\n        senderId: 4,\n        receiverId: 5,\n        status: 'sent',\n      };\n\n      chai.request(app)\n        .post(`${url}`)\n        .set({ 'access-token': token })\n        .send(message)\n        .end((err, res) => {\n          res.should.have.status(201);\n          res.body.should.have.property('data').which.is.an('object');\n        });\n    });\n\n    it('Should return status 400(Bad Request) if user input incomplete.', () => {\n      const message = {\n        id: 1,\n        subject: 'Hello Mail',\n        message: '',\n        parentMessageId: 0,\n        senderId: 4,\n        receiverId: 5,\n        status: 'sent',\n      };\n\n      chai.request(app)\n        .post(`${url}`)\n        .set({ 'access-token': token })\n        .send(message)\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.have.property('error').which.is.an('array');\n        });\n    });\n\n    it('Should return status 400(Bad Request) when there is no Token Provided', () => {\n      const message = {\n        id: 1,\n        subject: 'Hello Mail',\n        message: 'It\\'s nice to meet you, Send me a mail sometime.',\n        parentMessageId: 0,\n        senderId: 4,\n        receiverId: 5,\n        status: 'sent',\n      };\n\n      chai.request(app)\n        .post(`${url}`)\n        .send(message)\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.have.property('error').equal('No Authentication Token Provided.');\n        });\n    });\n  });\n\n  // testing GET route to get all recieved messages\n  describe('GET/ - Get all recieved messages', () => {\n    it('Should return status 200(OK) and an array of messages', () => {\n      chai.request(app)\n        .get(`${url}`)\n        .set({ 'access-token': token })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.have.property('data').which.is.an('array');\n        });\n    });\n  });\n\n  // testing GET route to get all unread messages\n  describe('GET/ unread - Get all unread messages', () => {\n    it('Should return status 200(OK) and an array of messages', () => {\n      chai.request(app)\n        .get(`${url}/unread`)\n        .set({ 'access-token': token })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.have.property('data').which.is.an('array');\n        });\n    });\n  });\n\n  // testing GET route to get all sent messages\n  describe('GET/ sent - Get all sent messages', () => {\n    it('Should return status 200(OK) and an array of messages', () => {\n      chai.request(app)\n        .get(`${url}/sent`)\n        .set({ 'access-token': token })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.have.property('data').which.is.an('array');\n        });\n    });\n  });\n\n  // testing GET route to get a single message\n  describe('GET/ :id - Get all a single message', () => {\n    it('Should return status 200(OK) and a single message object', () => {\n      chai.request(app)\n        .get(`${url}/4`)\n        .set({ 'access-token': token })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.have.property('data').which.is.an('object');\n        });\n    });\n\n    it('Should return status 404(Not Found) if Message ID is invalid.', () => {\n      chai.request(app)\n        .get(`${url}/5`)\n        .set({ 'access-token': token })\n        .end((err, res) => {\n          res.should.have.status(404);\n          res.body.should.have.property('error').equal('Message not found.');\n        });\n    });\n  });\n\n  // testing DELETE route to delete a messsage\n  describe('DELETE/ :id - Delete a Message', () => {\n    it('Should return status 204(Deleted)', () => {\n      chai.request(app)\n        .delete(`${url}/4`)\n        .set({ 'access-token': token })\n        .end((err, res) => {\n          res.should.have.status(204);\n        });\n    });\n\n    it('Should return status 404(Not found) if Message ID is invalid', () => {\n      chai.request(app)\n        .delete(`${url}/5`)\n        .set({ 'access-token': token })\n        .end((err, res) => {\n          res.should.have.status(404);\n          res.body.should.have.property('error').equal('Message not found.');\n        });\n    });\n  });\n});\n"],"file":"Message.spec.js"}