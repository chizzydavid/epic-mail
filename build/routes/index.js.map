{"version":3,"sources":["../../server/routes/index.js"],"names":["dotenv","config","router","storage","multer","diskStorage","destination","filename","req","file","cb","email","body","name","trim","split","ext","path","extname","originalname","upload","limits","fileSize","fileFilter","test","mimetype","single","cloudinary","v2","cloud_name","process","env","CLOUDINARY_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","uploadFile","res","next","e","status","json","error","imgName","replace","uploader","public_id","err","post","Validate","signUp","User","createUser","login","loginUser","get","Auth","verifyToken","getAllUsers","getSingleUser","delete","deleteUser","sendMessage","Message","saveDraft","saveAsDraft","getAllReceived","getCategory","getAllSent","verifyMessage","getSingleMessage","patch","updateToRead","retractMessage","deleteSentMessage","deleteReceivedMessage","newGroup","Group","createGroup","getAllUserGroups","verifyGroup","getSingleGroup","put","editGroup","addUserToGroup","deleteUserFromGroup","sendMessageToGroup","deleteGroup"],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport multer from 'multer';\nimport cloudinary from 'cloudinary';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport User from '../controllers/User';\nimport Message from '../controllers/Message';\nimport Group from '../controllers/Group';\nimport Validate from '../middlewares/validation/validation';\nimport Auth from '../middlewares/Auth';\n\n\ndotenv.config();\nconst router = Router();\n\n// multer configuration\nconst storage = multer.diskStorage({\n  destination: './server/uploads',\n  filename: (req, file, cb) => {\n    const { email } = req.body;\n    const [name] = email.trim().split('@');\n    const ext = path.extname(file.originalname) || '.jpg';\n    cb(null, name + ext);\n  },\n});\n\nconst upload = multer({\n  storage,\n  limits: { fileSize: 200000 },\n  fileFilter: (req, file, cb) => {\n    if (/image\\//.test(file.mimetype)) { cb(null, true); } else { cb('Error: Upload an image file.'); }\n  },\n}).single('photo');\n\n// cloudinary configuration\ncloudinary.v2.config({\n  cloud_name: process.env.CLOUDINARY_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\n// upload image file to the server\nconst uploadFile = (req, res, next) => {\n  upload(req, res, (e) => {\n    if (e) {\n      return res.status(400).json({\n        status: 400,\n        error: `Error uploading image. ${e}`,\n      });\n    }\n\n    // upload image from local server to cloudinary server\n\n    // extract name of image file excluding the extension\n    if (req.file) {\n      const imgName = req.file.filename.replace(/.\\w+$/, '');\n      cloudinary.v2.uploader.upload(req.file.path, { public_id: imgName }, (err) => {\n        if (err) {\n          return res.status(400).json({\n            status: 400,\n            error: `Error uploading image. ${err}`,\n          });\n        }\n      });\n    }\n\n\n    next();\n  });\n};\n\nrouter.post('/api/v2/auth/signup', uploadFile, Validate.signUp, User.createUser);\nrouter.post('/api/v2/auth/login', Validate.login, User.loginUser);\nrouter.get('/api/v2/users', Auth.verifyToken, User.getAllUsers);\nrouter.get('/api/v2/users/:id', Auth.verifyToken, User.getSingleUser);\nrouter.delete('/api/v2/users/:id', Auth.verifyToken, User.deleteUser);\n\nrouter.post('/api/v2/messages', Validate.sendMessage, Auth.verifyToken, Message.sendMessage);\nrouter.post('/api/v2/messages/draft', Validate.saveDraft, Auth.verifyToken, Message.saveAsDraft);\nrouter.get('/api/v2/messages', Auth.verifyToken, Message.getAllReceived);\nrouter.get('/api/v2/messages/unread', Auth.verifyToken, Message.getCategory('unread'));\nrouter.get('/api/v2/messages/read', Auth.verifyToken, Message.getCategory('read'));\nrouter.get('/api/v2/messages/draft', Auth.verifyToken, Message.getCategory('draft'));\nrouter.get('/api/v2/messages/sent', Auth.verifyToken, Message.getAllSent);\nrouter.get('/api/v2/messages/:id', Auth.verifyToken, Auth.verifyMessage, Message.getSingleMessage);\nrouter.patch('/api/v2/messages/:id', Auth.verifyToken, Auth.verifyMessage, Message.updateToRead);\nrouter.delete('/api/v2/messages/retract/:id', Auth.verifyToken, Auth.verifyMessage, Message.retractMessage);\nrouter.delete('/api/v2/messages/sent/:id', Auth.verifyToken, Auth.verifyMessage, Message.deleteSentMessage);\nrouter.delete('/api/v2/messages/:id', Auth.verifyToken, Auth.verifyMessage, Message.deleteReceivedMessage);\n\nrouter.post('/api/v2/groups', Validate.newGroup, Auth.verifyToken, Group.createGroup);\nrouter.get('/api/v2/groups', Auth.verifyToken, Group.getAllUserGroups);\nrouter.get('/api/v2/groups/:groupId', Auth.verifyToken, Auth.verifyGroup, Group.getSingleGroup);\nrouter.put('/api/v2/groups/:groupId', Validate.newGroup, Auth.verifyToken, Auth.verifyGroup, Group.editGroup);\nrouter.post('/api/v2/groups/:groupId/users', Auth.verifyToken, Auth.verifyGroup, Group.addUserToGroup);\nrouter.delete('/api/v2/groups/:groupId/users/:id', Auth.verifyToken, Auth.verifyGroup, Group.deleteUserFromGroup);\nrouter.post('/api/v2/groups/:groupId/messages', Validate.sendMessage, Auth.verifyToken, Auth.verifyGroup, Group.sendMessageToGroup);\nrouter.delete('/api/v2/groups/:groupId', Auth.verifyToken, Auth.verifyGroup, Group.deleteGroup);\n\nexport default router;\n"],"file":"index.js"}