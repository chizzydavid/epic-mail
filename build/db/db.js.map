{"version":3,"sources":["../../server/db/db.js"],"names":["Pool","require","dotenv","config","pool","connectionString","process","env","DATABASE_URL","on","createUserTable","queryText","query","createMessageTable","createGroupTable","createGroupUsersTable","createInboxTable","createOutboxTable","insertIntoUsers","dropUserTable","dropMessageTable","dropGroupTable","dropGroupUsersTable","dropInboxTable","dropOutboxTable","createAllTables","dropAllTables","setupTables","exit","module","exports"],"mappings":"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","sourcesContent":["const { Pool } = require('pg');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\npool.on('connect', () => {\n  // console.log('connected to the db');\n});\n\nconst createUserTable = async () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS users (\n        user_id SERIAL PRIMARY KEY,\n        email VARCHAR(128) NOT NULL,\n        first_name VARCHAR(50) NOT NULL,\n        last_name VARCHAR(50) NOT NULL,\n        password VARCHAR(128),\n        is_admin SMALLINT,\n        photo VARCHAR(200)\n     )`;\n\n  await pool.query(queryText);\n};\n\nconst createMessageTable = async () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS messages (\n    message_id SERIAL PRIMARY KEY,\n    subject VARCHAR(128),\n    message TEXT,\n    parent_msg_id VARCHAR(50),\n    sender_id INTEGER NOT NULL,\n    receiver_id INTEGER,\n    created_at VARCHAR(150) NOT NULL,\n    status VARCHAR(10) NOT NULL\n  )`;\n\n  await pool.query(queryText);\n};\n\nconst createGroupTable = async () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS groups (\n    group_id SERIAL PRIMARY KEY,\n    name VARCHAR(128) NOT NULL,\n    description TEXT NOT NULL,\n    owner_id INTEGER NOT NULL\n  )`;\n\n  await pool.query(queryText);\n};\n\nconst createGroupUsersTable = async () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS group_users (\n    group_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    user_role VARCHAR(20) NOT NULL\n  )`;\n\n  await pool.query(queryText);\n};\n\nconst createInboxTable = async () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS inbox (\n  receiver_id INTEGER NOT NULL,\n  message_id INTEGER NOT NULL)`;\n\n  await pool.query(queryText);\n};\n\nconst createOutboxTable = async () => {\n  const queryText = `CREATE TABLE IF NOT EXISTS outbox (\n  sender_id INTEGER NOT NULL,\n  message_id INTEGER NOT NULL)`;\n\n  await pool.query(queryText);\n};\n\nconst insertIntoUsers = async () => {\n  const queryText = `INSERT INTO users (email, first_name, last_name, password, is_admin) \n   VALUES('jimmycall@gmail.com', 'Jimmy', 'Call', 'jimmycall', 0)`;\n\n  await pool.query(queryText);\n};\n\n\nconst dropUserTable = async () => {\n  const queryText = 'DROP TABLE IF EXISTS users';\n\n  await pool.query(queryText);\n};\n\nconst dropMessageTable = async () => {\n  const queryText = 'DROP TABLE IF EXISTS messages';\n\n  await pool.query(queryText);\n};\n\nconst dropGroupTable = async () => {\n  const queryText = 'DROP TABLE IF EXISTS groups';\n\n  await pool.query(queryText);\n};\n\nconst dropGroupUsersTable = async () => {\n  const queryText = 'DROP TABLE IF EXISTS group_users';\n\n  await pool.query(queryText);\n};\n\nconst dropInboxTable = async () => {\n  const queryText = 'DROP TABLE IF EXISTS inbox';\n\n  await pool.query(queryText);\n};\n\nconst dropOutboxTable = async () => {\n  const queryText = 'DROP TABLE IF EXISTS outbox';\n\n  await pool.query(queryText);\n};\n\n\nconst createAllTables = async () => {\n  await createUserTable();\n  await createMessageTable();\n  await createGroupTable();\n  await createGroupUsersTable();\n  await createInboxTable();\n  await createOutboxTable();\n  await insertIntoUsers();\n};\n\nconst dropAllTables = async () => {\n  await dropUserTable();\n  await dropMessageTable();\n  await dropGroupTable();\n  await dropGroupUsersTable();\n  await dropInboxTable();\n  await dropOutboxTable();\n};\n\nconst setupTables = async () => {\n  await dropAllTables();\n  await createAllTables();\n};\n\n\npool.on('remove', () => {\n  // console.log('client removed');\n  process.exit(0);\n});\n\n\nmodule.exports = {\n  dropAllTables,\n  createAllTables,\n  setupTables,\n};\n\nrequire('make-runnable');\n"],"file":"db.js"}